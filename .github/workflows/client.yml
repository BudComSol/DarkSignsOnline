on:
  push:
    branches-ignore:
      - main
  workflow_call: {}

concurrency:
  group: client-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

name: Build client

permissions:
  contents: write

jobs:
  client:
    name: Build client
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          client:
            - 'client/**'
            - '.github/workflows/client.yml'
    - name: Download VB6 from public sources
      if: steps.changes.outputs.client == 'true' || startsWith(github.ref, 'refs/tags/')
      timeout-minutes: 5
      run: |
        $ErrorActionPreference = 'Stop'
        Set-PSDebug -Trace 1
        mkdir "C:\vb6"
        Invoke-WebRequest -Uri "https://archive.org/download/VisualBasic6Portable/Visual%20Basic%206%20Portable.exe" -OutFile "C:\vb6\vb6_portable.exe"
        Invoke-WebRequest -Uri "https://altushost-swe.dl.sourceforge.net/project/vb6extendedruntime/Visual%20Basic%206.0%20Runtime%20Plus%202.2.zip" -OutFile "C:\vb6\vb6runtime.zip"
        C:
        cd "C:\vb6"
        Start-Process -FilePath "C:\Program Files\7-Zip\7z.exe" -ArgumentList "x","C:\vb6\vb6_portable.exe" -Wait -PassThru
        Start-Process -FilePath "C:\Program Files\7-Zip\7z.exe" -ArgumentList "x","C:\vb6\vb6runtime.zip" -Wait -PassThru
    - name: Install VB6 runtime
      if: steps.changes.outputs.client == 'true' || startsWith(github.ref, 'refs/tags/')
      timeout-minutes: 5
      run: |
        $ErrorActionPreference = 'Stop'
        Set-PSDebug -Trace 1
        Start-Process -FilePath "C:\vb6\VB6 Runtime Plus 2.2.exe" -ArgumentList "/silent" -Wait -PassThru
        reg import ".\.github\vb6.reg"
    - name: Build client
      if: steps.changes.outputs.client == 'true' || startsWith(github.ref, 'refs/tags/')
      timeout-minutes: 2
      run: |
        $ErrorActionPreference = 'Stop'
        Set-PSDebug -Trace 1
        mkdir ".\dist"
        Start-Process -FilePath "C:\vb6\AutoPlay\Docs\Portable.VB6\Vb6.exe" -ArgumentList "/make",".\client\Project1.vbp","/outdir",".\dist\" -Wait -PassThru
        cd ".\dist"
        ..\client\mkdirs.bat
        Start-Process -FilePath "C:\Program Files\7-Zip\7z.exe" -ArgumentList "a","..\client.zip","*" -Wait -PassThru
    - name: Ensure Defender doesn't false-positive us
      if: steps.changes.outputs.client == 'true' || startsWith(github.ref, 'refs/tags/')
      timeout-minutes: 5
      run: |
        $ErrorActionPreference = 'Stop'
        Remove-MpPreference -ExclusionPath (Get-MpPreference).ExclusionPath
        Set-PSDebug -Trace 1
        Start-Process -FilePath "C:\Program Files\Windows Defender\MpCmdRun.exe" -ArgumentList "-SignatureUpdate","-http" -Wait -PassThru
        Start-Process -FilePath "C:\Program Files\Windows Defender\MpCmdRun.exe" -ArgumentList "-Scan","-ScanType","3","-File",".\dist\dso.exe" -Wait -PassThru
        if(![System.IO.File]::Exists(".\dist\dso.exe")) {
          throw (New-Object System.IO.FileNotFoundException("dso.exe not found. Defender likely nabbed it...", $path))
        }
        Start-Process -FilePath "C:\Program Files\Windows Defender\MpCmdRun.exe" -ArgumentList "-Scan","-ScanType","3","-File",".\client.zip" -Wait -PassThru
        if(![System.IO.File]::Exists(".\client.zip")) {
          throw (New-Object System.IO.FileNotFoundException("client.zip not found. Defender likely nabbed it...", $path))
        }
    - name: Take failure screenshot
      if: failure()
      run: |
        Add-Type -AssemblyName System.Windows.Forms,System.Drawing

        $screens = [Windows.Forms.Screen]::AllScreens

        $top    = ($screens.Bounds.Top    | Measure-Object -Minimum).Minimum
        $left   = ($screens.Bounds.Left   | Measure-Object -Minimum).Minimum
        $right  = ($screens.Bounds.Right  | Measure-Object -Maximum).Maximum
        $bottom = ($screens.Bounds.Bottom | Measure-Object -Maximum).Maximum

        $bounds   = [Drawing.Rectangle]::FromLTRB($left, $top, $right, $bottom)
        $bmp      = New-Object System.Drawing.Bitmap ([int]$bounds.width), ([int]$bounds.height)
        $graphics = [Drawing.Graphics]::FromImage($bmp)

        $graphics.CopyFromScreen($bounds.Location, [Drawing.Point]::Empty, $bounds.size)

        $bmp.Save(".\desktop.png")

        $graphics.Dispose()
        $bmp.Dispose()
    - name: Upload failure screenshot
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: desktop.png
        path: desktop.png
        if-no-files-found: error
    - name: Upload build artifacts
      if: steps.changes.outputs.client == 'true' || startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: client
        path: dist/
        if-no-files-found: error
    - name: Release mainline
      uses: softprops/action-gh-release@v2
      if: github.ref == 'refs/heads/main' && steps.changes.outputs.client == 'true'
      with:
        tag_name: latest
        files: client.zip
        fail_on_unmatched_files: true
        prerelease: true
    - name: Release tag
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: client.zip
        fail_on_unmatched_files: true
